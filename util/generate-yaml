DIR=$(dirname $0)

ISTIO_VERSION=1.0.5
#ISTIO_BRANCH=release-1.1

RELEASES_DIR=${DIR}/../../istio-releases

PLATFORM=linux
if [ -n "${ISTIO_VERSION}" ] ; then
  ISTIO_FILE="istio-${ISTIO_VERSION}-${PLATFORM}.tar.gz"
  ISTIO_URL="https://github.com/istio/istio/releases/download/${ISTIO_VERSION}/${ISTIO_FILE}"
  EXTRACT_CMD="tar -xvzf ${ISTIO_FILE}"
  RELEASE_DIR="${RELEASES_DIR}/istio-${ISTIO_VERSION}"
  ISTIO_NAME=istio-${ISTIO_VERSION}
else
  ISTIO_FILE="${ISTIO_BRANCH}.zip"
  ISTIO_URL="https://github.com/istio/istio/archive/${ISTIO_FILE}"
  EXTRACT_CMD="unzip ${ISTIO_FILE}"
  RELEASE_DIR="${RELEASES_DIR}/istio-${ISTIO_BRANCH}"
  ISTIO_NAME=istio-${ISTIO_BRANCH}
fi

HELM_DIR=${RELEASE_DIR}/install/kubernetes/helm/
REDHAT_HELM_DIR=${DIR}

ROLE_FILES_DIR="${DIR}/../roles/openshift_istio/files/"

function retrieveIstioRelease() {
  if [ ! -d "${RELEASES_DIR}" ] ; then
    mkdir -p "${RELEASES_DIR}"
  fi

  if [ ! -f "${RELEASES_DIR}/${ISTIO_FILE}" ] ; then
    (
        cd "${RELEASES_DIR}"
        curl -LO "${ISTIO_URL}"
        ${EXTRACT_CMD}
        if [ -z "${ISTIO_VERSION}" ] ; then
          (
            cd "${RELEASE_DIR}/install/kubernetes/helm"
            helm dep update istio
          )
        fi
    )
  fi
}

# The following modifications are made to the generated helm template for the Istio yaml files
# - remove the create customer resources job, we handle this in the installer to deal with potential races
# - remove the cleanup secrets job, we handle this in the installer
# - remove the kubernetes gateways
# - remove the CRDs, we will create a separate yaml file to install these objects
# - change privileged value on istio-proxy injection configmap to false
# - update the namespaceSelector to ignore namespaces with the label istio.openshift.com/ignore-namespace
# - add a maistra-version label to all objects which have a release label
# - remove GODEBUG from the pilot environment
function generateIstioTemplate() {
  VALUES=""
  while [ $# -gt 0 ] ; do
    VALUES="${VALUES} -f ${REDHAT_HELM_DIR}/$1"
    shift
  done

  helm template -n ${ISTIO_NAME} --namespace=istio-system ${VALUES} ${HELM_DIR}/istio | sed -e '/^# Source.*create-custom-resources-job.yaml/,/^# Source:/ {
    /^# Source/b
    d
  }' | sed -e '/^# Source:.*cleanup-secrets.yaml/,/^# Source:.*serviceaccount.yaml/ {
    /^# Source/b
    d
  }' | sed -e '/^# Source:.*pilot\/templates\/gateway.yaml/,/^# Source:/ {
    /^# Source/b
    d
  }' | sed -e '/^# Source:.*istio\/templates\/crds.yaml/,/^# Source:/ {
    /^# Source/b
    d
  }' | sed -e '/^# Source:.*istio\/charts\/pilot\/templates\/deployment.yaml/,/^# Source:/ {
    /GODEBUG/ {
      N
      d
    }
  }' | sed -e '1,/privileged/! {
    /privileged/ s/true/false/
  }' | sed -e '/namespaceSelector/,/istio-injection/s/matchLabels/matchExpressions/' \
           -e 's/istio-injection: enabled/- {key: istio.openshift.com\/ignore-namespace, operator: DoesNotExist}/' \
           -e '/GODEBUG/,/gctrace/d' \
           -e 's/^\(.*\)release:\(.*\)$/\1maistra-version: MAISTRA_VERSION\
\1release:\2/'
}

# The following modifications are made to the generated helm template to extract the CRDs
# - remove all content up to the crds.yaml source
# - remove all content after the crds.yaml source
function generateCRDsTemplate() {
  VALUES=""
  while [ $# -gt 0 ] ; do
    VALUES="${VALUES} -f ${REDHAT_HELM_DIR}/$1"
    shift
  done

  helm template -n ${ISTIO_NAME} --namespace=istio-system ${VALUES} ${HELM_DIR}/istio | sed -e '1,/^# Source:.*istio\/templates\/crds.yaml/ {
    /^# Source:.*istio\/templates\/crds.yaml/b
    d
  }' -e '/^# Source:/,$ d' \
     -e 's/^\(.*\)labels:$/\1labels:\
\1  maistra-version: MAISTRA_VERSION'/ \
     -e 's/^\(.*\)\(name: policies.authentication.istio.io\)$/\1\2\
\1labels:\
\1  maistra-version: MAISTRA_VERSION/' \
     -e 's/^\(.*\)\(name: meshpolicies.authentication.istio.io\)$/\1\2\
\1labels:\
\1  maistra-version: MAISTRA_VERSION/' \
     -e 's/^\(.*\)\(name: httpapispecbindings.config.istio.io\)$/\1\2\
\1labels:\
\1  maistra-version: MAISTRA_VERSION/' \
     -e 's/^\(.*\)\(name: httpapispecs.config.istio.io\)$/\1\2\
\1labels:\
\1  maistra-version: MAISTRA_VERSION/' \
     -e 's/^\(.*\)\(name: quotaspecbindings.config.istio.io\)$/\1\2\
\1labels:\
\1  maistra-version: MAISTRA_VERSION/' \
     -e 's/^\(.*\)\(name: quotaspecs.config.istio.io\)$/\1\2\
\1labels:\
\1  maistra-version: MAISTRA_VERSION/' \
     -e 's/^\(.*\)\(name: XXX\)$/\1\2\
\1labels:\
\1  maistra-version: MAISTRA_VERSION/'
}

# The following modifications are made to the generated helm template for the Grafana yaml file
# - add a service account for grafana
# - remove all non grafana configuration
# - remove the extraneous create custom resources job
# - add the service account to the deployment
# - add a maistra-version label to all objects which have a release label
function generateGrafanaTemplate() {
  VALUES=""
  while [ $# -gt 0 ] ; do
    VALUES="${VALUES} -f ${REDHAT_HELM_DIR}/$1"
    shift
  done

  (
    echo 'apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: istio-system
  labels:
    app: grafana' ;
    helm template -n ${ISTIO_NAME} --namespace=istio-system ${VALUES} ${HELM_DIR}/istio
  ) | sed -e 's/^# Source:/# MAISTRA:/' \
    | sed -e 's/^# MAISTRA: \(istio\/charts\/grafana\)/# Source: \1/' \
    | sed -e '/^# MAISTRA:/,/^# Source:/ {
      /^# Source/ b
      /^# MAISTRA/ b
      d
    }' | sed -e 's/^# MAISTRA:/# Source:/' \
    | sed -e '/^# Source:.*create-custom-resources-job.yaml/,/^# Source:/ {
      /^# Source/b
      d
    }' | sed -e 's/^\(.*\)containers:\(.*\)$/\1serviceAccountName: grafana\
\1containers:\2/' \
             -e 's/^\(.*\)release:\(.*\)$/\1maistra-version: MAISTRA_VERSION\
\1release:\2/'
}

# The following modifications are made to the generated helm template for the Kiali yaml file
# - remove all non kiali configuration
# - remove the kiali username/password secret
# - add release label to kiali clusterrole
function generateKialiTemplate() {
  VALUES=""
  while [ $# -gt 0 ] ; do
    VALUES="${VALUES} -f ${REDHAT_HELM_DIR}/$1"
    shift
  done

  helm template -n ${ISTIO_NAME} --namespace=istio-system ${VALUES} ${HELM_DIR}/istio \
    | sed -e 's/^# Source:/# MAISTRA:/' \
    | sed -e 's/^# MAISTRA: \(istio\/charts\/kiali\)/# Source: \1/' \
    | sed -e '/^# MAISTRA:/,/^# Source:/ {
      /^# Source/ b
      /^# MAISTRA/ b
      d
    }' | sed -e 's/^# MAISTRA:/# Source:/' \
    | sed -e '/^# Source: istio\/charts\/kiali\/templates\/secrets.yaml/,/^# Source:/ {
      /^# Source/b
      d
    }' | sed -e '/^# Source: istio\/charts\/kiali\/templates\/clusterrole.yaml/,/^# Source:/ {
      /labels:/ a\
\    release: istio-'${ISTIO_VERSION}'
    }'
}

# The following modifications are made to the upstream kiali configuration for deployment on OpenShift
# - Add jaeger and grafana URLs to the configmap as well as the identity certs
# - Add the route.openshift.io api group to the cluster role
# - Add the openshift annotation to the service
# - Remove the prometheus, grafana environment from the deployment
# - Add the kiali-cert volume mount
# - Add the kiali-cert volume
# - Add patch verb to config.istio.io and networking.istio.io
# - Add istio namespace to the configmap
function transformKialiOpenShift() {
  sed -e 's/v0\.7\.2/v0\.9\.1/' \
  | sed -e '/^# Source: istio\/charts\/kiali\/templates\/configmap.yaml/,/^# Source:/ {
      /server:/ i\
\    istio_namespace: ISTIO_NAMESPACE
      /port: 20001/ a\
\      static_content_root_directory: /opt/kiali/console
      /jaeger:/,/url:/ {
        /url:/ s/$/JAEGER_URL/
      }
      /grafana:/,/url:/ {
        /url:/ s/$/GRAFANA_URL/
      }
  }' \
  | sed -e '/GRAFANA_URL/ a\
\    identity:\
\      cert_file: /kiali-cert/tls.crt\
\      private_key_file: /kiali-cert/tls.key' \
  | sed -e '/apiGroups:.*config.istio.io/,/---/ {
      /- watch/ a\
\  - delete
  }' | sed -e '/apiGroups:.*config.istio.io/ i\
\- apiGroups: ["project.openshift.io"]\
\  resources:\
\  - projects\
\  verbs:\
\  - get\
\- apiGroups: ["route.openshift.io"]\
\  resources:\
\  - routes\
\  verbs:\
\  - get\
\- apiGroups: ["apps.openshift.io"]\
\  resources:\
\  - deploymentconfigs\
\  verbs:\
\  - get\
\  - list\
\  - watch' \
  | sed -e '/kind.*Service$/,/metadata/ {
    /metadata/ a\
\  annotations:\
\    service.alpha.openshift.io/serving-cert-secret-name: kiali-cert-secret
  }' | sed -e '/PROMETHEUS_SERVICE_URL/,/volumeMounts/ {
    /volumeMounts/b
    d
  }' | sed -e '/kind.*Deployment$/,/^# Source:/ {
    /volumeMounts:/ {
      N
      N
      a\
\        - name: kiali-cert\
\          mountPath: "/kiali-cert"
    }
    /configMap:/ {
      N
      a\
\      - name: kiali-cert\
\        secret:\
\          secretName: kiali-cert-secret
    }
  }' | sed -e '/apiGroups:.*config.istio.io/,/---/ {
      /- watch/ i\
\  - patch
  }'
}

retrieveIstioRelease

generateIstioTemplate values-redhat.yaml values-redhat-auth.yaml > ${ROLE_FILES_DIR}/istio-auth.yaml
generateIstioTemplate values-redhat.yaml > ${ROLE_FILES_DIR}/istio.yaml
generateCRDsTemplate values-redhat.yaml values-redhat-auth.yaml > ${ROLE_FILES_DIR}/istio-crds.yaml
generateGrafanaTemplate values-redhat-grafana.yaml > ${ROLE_FILES_DIR}/grafana.yaml
generateKialiTemplate values-redhat-kiali.yaml | transformKialiOpenShift > ${ROLE_FILES_DIR}/kiali.yaml
