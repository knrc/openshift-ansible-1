---
- name: Update images in the configuration files if not running community
  include_tasks: modify_image_names.yml
    image_names="{{ openshift_istio_image_names }}"
  with_items: "{{ openshift_istio_yaml_configuration_files }} + {{ openshift_istio_jaeger_yaml_configuration_files }} + {{ openshift_istio_kiali_yaml_configuration_files }}"
  loop_control:
    loop_var: configuration
  when: not (openshift_istio_install_community | bool)

- name: Update maistra-version within configuration openshift_istio_release
  replace:
    path: "{{ item }}"
    regexp: "MAISTRA_VERSION"
    replace: "{{ default_istio_maistra_tag }}"
  with_items: "{{ openshift_istio_maistra_version_files }}"

- name: Label Istio namespace so it is ignored by injection
  command: "{{ openshift_client_binary }} label --overwrite=true namespace {{ openshift_istio_namespace }} istio.openshift.com/ignore-namespace=ignore"

- name: Create Istio CRDs
  command: "{{ openshift_client_binary }} create -f {{ openshift_istio_crds_yaml }}"

- name: Wait for resource CRDs to establish
  shell: "{{ openshift_client_binary }} get --raw /apis/{{ item.namespace }}/{{ item.version }}/{{ item.name }}"
  register: result
  until: result.rc == 0
  retries: 10
  delay: 2
  ignore_errors: yes
  with_items: "{{ openshift_istio_resources }}"

- name: Create Istio components with auth
  command: "{{ openshift_client_binary }} create -f {{ openshift_istio_auth_yaml }}"
  ignore_errors: yes
  when: openshift_istio_install_auth | bool

- name: Create Istio components without auth
  command: "{{ openshift_client_binary }} create -f {{ openshift_istio_yaml }}"
  ignore_errors: yes
  when: not (openshift_istio_install_auth| bool)

- name: Wait for galley deployment to be established
  command: "{{ openshift_client_binary }} get deployment -n {{ openshift_istio_namespace }} istio-galley -o jsonpath='{..status.readyReplicas}'"
  register: result
  until: result.stdout == "1"
  retries: 60
  delay: 5

- name: Get galley deployment UID
  shell: "{{ openshift_client_binary }} get deployment  -n {{ openshift_istio_namespace }} istio-galley -o yaml 2>&1 | grep -w uid | awk '{print $2}'"
  register: uid_result

- name: modify UID configuration
  replace:
    path: "{{ openshift_validatingwebhookconfiguration_yaml }}"
    regexp: "DEPLOYMENT_UID"
    replace: "{{ uid_result.stdout }}"

- name: create preconfigured validating webhook
  command: "{{ openshift_client_binary }} create -f {{ openshift_validatingwebhookconfiguration_yaml }}"

- name: Wait for galley validating webhook to reconfigure
  shell: "{{ openshift_client_binary }} get validatingwebhookconfiguration istio-galley -o yaml | grep -l caBundle"
  register: openshift_istio_galley_validating_webhook
  until: openshift_istio_galley_validating_webhook.rc == 0
  retries: 10
  delay: 2
  ignore_errors: true

- name: Handle security custom resources
  block:
    - name: Retrieve istio-security-custom-resources ConfigMap
      command: "{{ openshift_client_binary }} extract -n {{ openshift_istio_namespace }} configmap/istio-security-custom-resources --confirm --to=/tmp --keys=custom-resources.yaml"
    - name: Install security custom resources
      command: "{{ openshift_client_binary }} create -f /tmp/custom-resources.yaml"
  when: openshift_istio_install_auth | bool

- name: Set authenticated cluster role to enable access for all authenticated users
  command: "{{ openshift_client_binary }} create -f {{ openshift_istio_authenticated_clusterrole_yaml }}"

- name: Expose Istio ingress gateway service
  command: "{{ openshift_client_binary }} expose -n {{ openshift_istio_namespace }} svc istio-ingressgateway"

- name: Expose prometheus service
  command: "{{ openshift_client_binary }} expose -n {{ openshift_istio_namespace }} svc prometheus"
