---
- name: Update images in the configuration files if not running community
  include_tasks: modify_image_names.yml
  vars:
    image_names: "{{ openshift_istio_image_names }}"
  with_items: "{{ openshift_istio_yaml_configuration_files }} + {{ openshift_istio_jaeger_yaml_configuration_files }} + {{ openshift_istio_kiali_yaml_configuration_files }} + {{ openshift_istio_three_scale_yaml_configuration_files }}"
  loop_control:
    loop_var: configuration
  when: not (openshift_istio_install_community | bool)

- name: Update maistra-version within configuration openshift_istio_release
  replace:
    path: "{{ item }}"
    regexp: "MAISTRA_VERSION"
    replace: "{{ openshift_istio_image_dict[openshift_deployment_type]['istio_version'] }}"
  with_items: "{{ openshift_istio_maistra_version_files }}"

- name: Label Istio namespace so it is ignored by injection
  command: "{{ openshift_client_binary }} label --overwrite=true namespace {{ openshift_istio_namespace }} istio.openshift.com/ignore-namespace=ignore"

- name: Create Istio CRD ConfigMaps
  command: "{{ openshift_client_binary }} create -f {{ openshift_istio_crds_yaml }}"

- name: Install custom resource definitions
  block:
    - name: Retrieve istio-crd-10 custom resource definitions
      command: "{{ openshift_client_binary }} extract -n {{ openshift_istio_namespace }} configmap/istio-crd-10 --confirm --to=/tmp --keys=crd-10.yaml"
    - name: Install istio-crd-10 custom resource definitions
      command: "{{ openshift_client_binary }} create -f /tmp/crd-10.yaml"
    - name: Retrieve istio-crd-11 custom resource definitions
      command: "{{ openshift_client_binary }} extract -n {{ openshift_istio_namespace }} configmap/istio-crd-11 --confirm --to=/tmp --keys=crd-11.yaml"
    - name: Install istio-crd-11 custom resource definitions
      command: "{{ openshift_client_binary }} create -f /tmp/crd-11.yaml"

- name: Wait for resource CRDs to establish
  shell: "{{ openshift_client_binary }} get --raw /apis/{{ item.group }}/{{ item.version }}/{{ item.name }}"
  register: result
  until: result.rc == 0
  retries: 10
  delay: 2
  ignore_errors: yes
  with_items: "{{ openshift_istio_resources }}"

- name: Create Istio components with auth
  command: "{{ openshift_client_binary }} create -f {{ openshift_istio_auth_yaml }}"
  ignore_errors: yes
  when: openshift_istio_install_auth | bool

- name: Create Istio components without auth
  command: "{{ openshift_client_binary }} create -f {{ openshift_istio_yaml }}"
  ignore_errors: yes
  when: not (openshift_istio_install_auth| bool)

- name: Wait for galley deployment to be established
  command: "{{ openshift_client_binary }} get deployment -n {{ openshift_istio_namespace }} istio-galley -o jsonpath='{..status.readyReplicas}'"
  register: result
  until: result.stdout == "1"
  retries: 60
  delay: 5

- name: Wait for galley validating webhook to reconfigure
  shell: "{{ openshift_client_binary }} get validatingwebhookconfiguration istio-galley -o yaml | grep -l caBundle"
  register: openshift_istio_galley_validating_webhook
  until: openshift_istio_galley_validating_webhook.rc == 0
  retries: 10
  delay: 2
  ignore_errors: true

- name: Wait for istio-sidecar-injector deployment to be established
  command: "{{ openshift_client_binary }} get deployment -n {{ openshift_istio_namespace }} istio-sidecar-injector -o jsonpath='{..status.readyReplicas}'"
  register: result
  until: result.stdout == "1"
  retries: 60
  delay: 5

- name: Wait for istio-sidecar-injector mutating webhook to reconfigure
  shell: "{{ openshift_client_binary }} get mutatingwebhookconfiguration istio-sidecar-injector -o yaml | grep -l caBundle"
  register: openshift_istio_sidecar_injector_mutating_webhook
  until: openshift_istio_sidecar_injector_mutating_webhook.rc == 0
  retries: 10
  delay: 2
  ignore_errors: true

- name: Get istio-sidecar-injector deployment UID
  shell: "{{ openshift_client_binary }} get deployment -n {{ openshift_istio_namespace }} istio-sidecar-injector -o yaml 2>&1 | grep -w uid | awk '{print $2}'"
  register: uid_result

- name: Patch the mutating webhook
  command: "{{ openshift_client_binary }} patch mutatingwebhookconfiguration istio-sidecar-injector -p '{\"metadata\":{\"ownerReferences\": [{\"apiVersion\": \"extensions/v1beta1\", \"blockOwnerDeletion\": true, \"controller\": true, \"kind\": \"Deployment\", \"name\": \"istio-sidecar-injector\", \"uid\": \"{{ uid_result.stdout }}\"}]}}'"

- name: Handle security custom resources
  block:
    - name: Retrieve istio-security-custom-resources ConfigMap
      command: "{{ openshift_client_binary }} extract -n {{ openshift_istio_namespace }} configmap/istio-security-custom-resources --confirm --to=/tmp --keys=custom-resources.yaml"
    - name: Install security custom resources
      command: "{{ openshift_client_binary }} create -f /tmp/custom-resources.yaml"
  when: openshift_istio_install_auth | bool

- name: Set authenticated cluster role to enable access for all authenticated users
  command: "{{ openshift_client_binary }} create -f {{ openshift_istio_authenticated_clusterrole_yaml }}"

- name: Expose Istio ingress gateway service
  command: "{{ openshift_client_binary }} expose -n {{ openshift_istio_namespace }} svc istio-ingressgateway"

- name: Expose prometheus service
  command: "{{ openshift_client_binary }} expose -n {{ openshift_istio_namespace }} svc prometheus"
