---
- name: Obtain list of Mutating Webhook Configurations
  shell: "{{ openshift_client_binary }} get mutatingwebhookconfiguration -l maistra-version={{openshift_istio_installed_maistra_version}} -o=jsonpath='{..metadata.name}' | tr ' ' '\n'"
  register: openshift_istio_mutatingwebhookconfiguration
  ignore_errors: true

- name: Remove Mutating Webhook
  command: "{{ openshift_client_binary }} delete mutatingwebhookconfiguration {{ item }}"
  with_items: "{{ openshift_istio_mutatingwebhookconfiguration.stdout_lines|list }}"

- name: Obtain list of Validating Webhook Configurations
  shell: "{{ openshift_client_binary }} get validatingwebhookconfiguration -l maistra-version={{openshift_istio_installed_maistra_version}} -o=jsonpath='{..metadata.name}' | tr ' ' '\n'"
  register: openshift_istio_validatingwebhookconfiguration
  ignore_errors: true

- name: Remove Validating Webhook
  command: "{{ openshift_client_binary }} delete validatingwebhookconfiguration {{ item }}"
  with_items: "{{ openshift_istio_validatingwebhookconfiguration.stdout_lines }}"

- name: Remove all Istio components
  command: "{{ openshift_client_binary }} delete {{ item }} -n {{ openshift_istio_namespace }} --all"
  with_items: " {{ openshift_istio_component_types }}"

- name: Wait for Istio components to be removed
  command: "{{ openshift_client_binary }} get {{ item }} -n {{ openshift_istio_namespace }}"
  register: result
  until: result.stderr == "No resources found."
  retries: 15
  delay: 2
  ignore_errors: yes
  with_items: "{{ openshift_istio_component_types }}"

- name: Remove components with specific labels
  include_tasks: remove_labelled_components.yml
  with_items: "{{ openshift_istio_maistra_component_labels }}"
  loop_control:
    loop_var: label

- name: Remove all istio service accounts
  command: "{{ openshift_client_binary }} delete sa {{ item }}"
  ignore_errors: yes
  with_items: "{{ openshift_istio_all_service_accounts }}"

- name: Obtain list of Certificate Signing Requests
  shell: "{{ openshift_client_binary }} get certificatesigningrequest -o=jsonpath='{..metadata.name}' | tr ' ' '\n' | grep istio"
  register: openshift_istio_certificatesigningrequest
  ignore_errors: true

- name: Remove Certificate Signing Requests
  command: "{{ openshift_client_binary }} delete certificatesigningrequest {{ item }}"
  with_items: "{{ openshift_istio_certificatesigningrequest.stdout_lines|list }}"

- name: Remove Prometheus Cluster Role Binding
  command: "{{ openshift_client_binary }} delete clusterrolebinding prometheus-istio-system"
  ignore_errors: true

- name: Remove Prometheus Cluster Role
  command: "{{ openshift_client_binary }} delete clusterrole prometheus-istio-system"
  ignore_errors: true

- name: Obtain all Istio secrets
  command: "{{ openshift_client_binary }} get secret --all-namespaces -o=jsonpath='{{ openshift_istio_secret_query_template }}'"
  register: openshift_istio_secrets

- name: Remove all Istio secrets
  command: "{{ openshift_client_binary }} delete secret -n {{ item.split()[0] }} {{ item.split()[1] }}"
  with_items: "{{ openshift_istio_secrets.stdout_lines|list }}"

- name: Check istio project exists
  command: "{{ openshift_client_binary }} get namespace {{ openshift_istio_namespace }}"
  register: istio_namespace
  ignore_errors: yes

- name: Remove istio project if necessary
  command: "{{ openshift_client_binary }} delete project {{ openshift_istio_namespace }}"
  when: istio_namespace.rc == 0 and not openshift_istio_install | bool
